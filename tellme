#!/usr/bin/python3
"""
Get information from o.s.d Maintenance: Test Repo specific for SAP & HA
"""

import argparse
import ssl
import sys

from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta
from itertools import product
from urllib.request import urlopen
from urllib.error import HTTPError, URLError

from bs4 import BeautifulSoup

__version__ = "0.9.0"

GROUP_ID = {
    '12-SP2': 54, '12-SP3': 108, '12-SP4': 218, '12-SP5': 280,
    '15': 165, '15-SP1': 232, '15-SP2': 308
}
FLAVORS = ('SAP-DVD-Updates', 'Server-DVD-HA-Updates')
BASE_URL = 'https://openqa.suse.de/tests/'
URL = BASE_URL + 'overview?distri=sle&version=%s&build=%s-%d&groupid=%s'
RUNS = (1, 2)

# https://github.com/os-autoinst/openQA/blob/master/assets/stylesheets/test-details.scss
STATUSES = (
    'blocked', 'cancelled', 'failed', 'incomplete', 'none',
    'obsoleted', 'parallel_failed', 'parallel_restarted',
    'passed', 'scheduled', 'skipped', 'softfailed',
    'timeout_exceeded', 'unknown', 'uploading',
    'user_cancelled', 'user_restarted')

info = {run: {version: {flavor: {}
        for flavor in FLAVORS}
        for version in GROUP_ID}
        for run in RUNS}


def date(string):
    """
    Check date option: [[[CC]YY]MM]DD | -<DAYS AGO>
    """
    fmt = "%Y%m%d"
    now = datetime.now()
    if string.isdigit() and int(string) > 0:
        if len(string) < 3:
            # Missing year & month
            string = "%s%02d%02d" % (now.year, now.month, int(string))
        elif len(string) < 5:
            # Missing year
            string = "%s%02d" % (now.year, int(string))
        elif len(string) < 7:
            # Missing century
            string = "%s%s" % (str(now.year)[:-2], string)
    try:
        when = datetime.strptime(string, fmt)
        if when > now:
            raise argparse.ArgumentTypeError("Back to the future?")
    except ValueError:
        try:
            when = now + timedelta(days=int(string))
        except ValueError:
            raise argparse.ArgumentTypeError("Invalid date")
    return when.strftime(fmt)


def parse_opts():
    """
    Parse options and arguments
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-a', '--all', action='store_true',
        help="Show all tests. Ignored if --status option is used")
    parser.add_argument(
        '-d', '--date', default='0', type=date,
        help="Show results for date: [[[CC]YY]MM]DD | -<DAYS AGO>")
    parser.add_argument(
        '-k', '--insecure', action='store_true',
        help="Allow insecure server connections when using SSL")
    parser.add_argument(
        '-s', '--status', action='append', choices=STATUSES,
        help="Filter by status. May be specified multiple times")
    parser.add_argument(
        '-V', '--version', action='store_true',
        help="Show version and exit")
    return parser.parse_args()


def get_info(version, run):
    """
    Get the information for a particular SLE version
    """
    url = URL % (version, opts.date, run, GROUP_ID[version])
    with urlopen(url, context=ctx) as conn:
        soup = BeautifulSoup(conn.read(), 'html.parser')
    for flavor in FLAVORS:
        table = soup.find('table', id="results_%s" % flavor)
        rows = table.find_all('tr')[1:]
        for row in rows:
            job = row.find('td', {'class': "name"}).span.text
            status = row.find('i', {'class': "status"})['class']
            if status[3].startswith("result_"):
                status = status[3][len("result_"):]
            elif status[1].startswith("state_"):
                status = status[1][len("state_"):]
            if not opts.all and status in {'passed', 'softfailed'} or \
                    opts.status and status not in opts.status:
                continue
            url = row.find('a', href=True)['href'][len("/tests/"):]
            info[run][version][flavor][job] = {'url': url, 'status': status}


def print_info():
    """
    Print information
    """
    for run in RUNS:
        for version in info[run]:
            for flavor in info[run][version]:
                if not info[run][version][flavor]:
                    continue
                for job, data in info[run][version][flavor].items():
                    url = BASE_URL + data['url']
                    print(HEADER % (run, version, flavor, job, data['status'], url))


if __name__ == "__main__":
    opts = parse_opts()
    if opts.version:
        print(__version__)
        sys.exit(0)
    if opts.status:
        opts.all = True
    ctx = ssl.create_default_context()
    if opts.insecure:
        ctx.check_hostname = False
        ctx.verify_mode = ssl.CERT_NONE
    # Check if host is accessible
    try:
        urlopen("https://openqa.suse.de/favicon.ico", context=ctx)
    except (HTTPError, URLError) as err:
        print("ERROR: %s" % err.reason, file=sys.stderr)
        sys.exit(1)
    HEADER = "%-4s %-8s\t%-20s\t%-45s\t%-20s\t%s"
    print(HEADER % ("RUN", "VERSION", "FLAVOR", "JOB", "STATUS", "URL"))
    with ThreadPoolExecutor() as executor:
        executor.map(lambda args: get_info(*args), product(GROUP_ID, RUNS))
    print_info()
