#!/usr/bin/python3
"""
Get information from o.s.d Maintenance: Test Repo specific for SAP & HA
"""

import argparse
import sys

from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta
from itertools import product
from urllib.request import urlopen
from urllib.error import HTTPError, URLError

from bs4 import BeautifulSoup

__version__ = "0.5.0"

GROUP_ID = {
    '12-SP2': 54, '12-SP3': 108, '12-SP4': 218, '12-SP5': 280,
    '15': 165, '15-SP1': 232, '15-SP2': 308
}
FLAVORS = ('SAP-DVD-Updates', 'Server-DVD-HA-Updates')
BASE_URL = 'https://openqa.suse.de/tests/'
URL = BASE_URL + 'overview?distri=sle&version=%s&build=%s-%d&groupid=%s'
RUNS = (1, 2)

info = {1: {}, 2: {}}


def date(string):
    """
    Check date option: [[[CC]YY]MM]DD | today | yesterday | -<DAYS AGO>
    """
    fmt = "%Y%m%d"
    now = datetime.now()
    if string.isdigit() and len(string) < 8:
        # Allow specifying shorter dates
        if len(string) == 6:
            # Missing century
            string = "%s%s" % (str(now.year)[:-2], string)
        elif len(string) >= 3:
            # Missing year
            string = "%s%s" % (now.year, string)
        else:
            # Missing year & month
            string = "%s%s%s" % (now.year, now.month, string)
    try:
        when = datetime.strptime(string, fmt)
        if when > now:
            raise argparse.ArgumentTypeError("Back to the future?")
    except ValueError:
        if string == "today":
            when = now
        elif string == "yesterday":
            when = now - timedelta(days=1)
        else:
            try:
                when = now + timedelta(days=int(string))
            except ValueError:
                raise argparse.ArgumentTypeError("Valid dates: YYYYMMDD | today | yesterday | -<DAYS AGO>")
    return when.strftime(fmt)


def parse_opts():
    """
    Parse options and arguments
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', '--all', action='store_true',
                        help="Also show passed tests")
    parser.add_argument('-d', '--date', default='today', type=date,
                        help="Show results for date: [[[CC]YY]MM]DD | today | yesterday | -<DAYS AGO>")
    parser.add_argument('-s', '--status', action='append',
                        help="Filter by status. May be specified multiple times")
    parser.add_argument('-V', '--version', action='store_true',
                        help="Show version and exit")
    return parser.parse_args()


def get_info(version, run):
    """
    Get the information for a particular SLE version
    """
    url = URL % (version, opts.date, run, GROUP_ID[version])
    with urlopen(url) as conn:
        soup = BeautifulSoup(conn.read(), 'html.parser')
    info[run][version] = {}
    for flavor in FLAVORS:
        table = soup.find('table', id="results_%s" % flavor)
        rows = table.find_all('tr')[1:]
        info[run][version][flavor] = {}
        for row in rows:
            job = row.find('td', {'class': "name"}).span.text
            status = row.find('i', {'class': "status"})['class']
            if status[3].startswith("result_"):
                status = status[3][len("result_"):]
            elif status[1].startswith("state_"):
                status = status[1][len("state_"):]
            if not opts.all and status in {'passed', 'softfailed'} or \
                    opts.status and status not in opts.status:
                continue
            url = row.find('a', href=True)['href'][len("/tests/"):]
            info[run][version][flavor][job] = {'url': url, 'status': status}


def print_info():
    """
    Print information
    """
    for run in RUNS:
        for version in info[run]:
            for flavor in info[run][version]:
                if not info[run][version][flavor]:
                    continue
                for job, data in info[run][version][flavor].items():
                    print("%-4s %8s\t%25s\t%50s\t%20s\t%s%s" % (
                        run, version, flavor, job,
                        data['status'], BASE_URL, data['url']))


if __name__ == "__main__":
    opts = parse_opts()
    if opts.status:
        opts.all = True
        opts.status = set(opts.status)  # Need for speed
    if opts.version:
        print(__version__)
        sys.exit(0)
    # Check if host is accessible
    try:
        urlopen("https://openqa.suse.de/favicon.ico")
    except (HTTPError, URLError) as err:
        print("ERROR: %s" % err.reason, file=sys.stderr)
        sys.exit(1)
    print("%-4s %8s\t%25s\t%50s\t%20s\t%s" % (
        "RUN", "VERSION", "FLAVOR", "JOB", "STATUS", "URL"))
    with ThreadPoolExecutor() as executor:
        executor.map(lambda args: get_info(*args), product(GROUP_ID, RUNS))
    print_info()
